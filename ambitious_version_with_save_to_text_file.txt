#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "citation.h"

const int DEFAULT_PRETTY_WIDTH = 300;
const int COMMAND_CHARACTER_LIMIT = 512;
const int PATH_CHARACTER_LIMIT = 512;
const int QUOTE_CHARACTER_LIMIT = 2048;
const int OUTPUT_CHARACTER_LIMIT = 15000; // Estimation prudente de la taille de la mémoire tampon pour la sortie du figlet, basée sur le produit de la longueur de 50 lignes et de la largeur par défaut de 300. 50 * 300 = 15000

void affiche_dragon();

int find_width(char *filename);

void affiche_vache(char* eyes, char* tongue) {

    printf("        \\   ^__^\n");
    printf("         \\  (%s)\\_______\n", eyes);
    printf("            (__)\\       )\\/\\\n");
    printf("             %s ||----w |\n", tongue);
    printf("                ||     ||\n");
}

// Crédit d'art ASCII inconnu - du manuel de cowsay
void affiche_dragon() {

    printf("      \\                    / \\  //\\\n");
    printf("       \\    |\\___/|      /   \\//  \\\\\n");
    printf("            /0  0  \\__  /    //  | \\ \\\n");
    printf("           /     /  \\/_/    //   |  \\  \\\n");
    printf("           @_^_@'/   \\/_   //    |   \\   \\\n");
    printf("           //_^_/     \\/_ //     |    \\    \\\n");
    printf("        ( //) |        \\///      |     \\     \\\n");
    printf("      ( / /) _|_ /   )  //       |      \\     _\\\n");
    printf("    ( // /) '/,_ _ _/  ( ; -.    |    _ _\\.-~        .-~~~^-.\n");
    printf("  (( / / )) ,-{        _      `-.|.-~-.           .~         `.\n");
    printf(" (( // / ))  '/\\      /                 ~-. _ .-~      .-~^-.  \\\n");
    printf(" (( /// ))      `.   {            }                   /      \\  \\\n");
    printf("  (( / ))     .----~-.\\        \\-'                 .~         \\  `. \\^-.\n");
    printf("             ///.----..>        \\             _ -~             `.  ^-`  ^-_\n");
    printf("               ///-._ _ _ _ _ _ _}^ - - - - ~                     ~-- ,.-~\n");
    printf("                                                                  /.-~\n");
}

void affiche_pretty_image(char* filename, int width, char* output_file) {

    // Construire une chaîne de commande pour appeler la bibliothèque jp2a dans wsl
    char command[COMMAND_CHARACTER_LIMIT];
    char path[PATH_CHARACTER_LIMIT];

    // Construire la commande jp2a
    sprintf(command, "jp2a --width=%d %s", width, filename);

    // Exécutez la commande et écrivez la sortie dans le fichier
    FILE* fp = popen(command, "r");
    FILE* out = fopen(output_file, "w");
    if (fp == NULL || out == NULL) {
        printf("Failed to run command or create output file for pretty image\n");
    }

    char output[OUTPUT_CHARACTER_LIMIT];
    while (fgets(output, sizeof(output), fp) != NULL) {
        fprintf(out, "%s", output);
    }

    pclose(fp);
    fclose(out);
}

void affiche_pretty_citation(char* quote, int width, char* output_file) {

    // Construire une chaîne de commande pour appeler la bibliothèque figlet dans wsl
    char command[COMMAND_CHARACTER_LIMIT];
    sprintf(command, "figlet -w %d \"%s\"", width, quote);

    // Exécuter la commande et écrire la sortie dans le fichier
    FILE* fp = popen(command, "r");
    FILE* out = fopen(output_file, "a"); // Append to the file instead of overwriting it
    if (fp == NULL || out == NULL) {
        printf("Failed to run command or create output file for pretty quote\n");
    }

    char output[OUTPUT_CHARACTER_LIMIT];
    while (fgets(output, sizeof(output), fp) != NULL) {
        fprintf(out, "%s", output);
    }

    pclose(fp);
    fclose(out);
}


int find_width(char* filename) {

    FILE* fp;
    char ch;
    int line_width = 0;

    fp = fopen(filename, "r");

    if (fp == NULL) {
        printf("Impossible d'ouvrir le fichier.\n");
        return 0;
    }

    while ( ((ch = fgetc(fp)) != EOF) && (ch != '\n') ) {
        line_width++;
    }

    fclose(fp);
    return line_width;
}

void update () {
    printf (" \033[ H \033[ J");
}

void gotoxy (int x , int y) {
    printf (" \033[% d;% dH",x , y );
}

int main(int argc, char* argv[]) {

    // On déclare les paramètres et leur buffer défaut
    char eyes[8] = "00";
    char tongue[8] = "U";
    char avatar[32] = "cow";

    int pretty_width = DEFAULT_PRETTY_WIDTH;
    char pretty_image_filename[PATH_CHARACTER_LIMIT];
    char quote[QUOTE_CHARACTER_LIMIT];
    char pretty_output[OUTPUT_CHARACTER_LIMIT];

    // On traite des arguments. Rappel que le nom du script est stocke dans argv[0]
    for (int i = 1; i < argc; i++) {

        // Les yeux
        if (strcmp(argv[i], "-e") == 0 && i + 1 < argc) {
            strcpy(eyes, argv[i + 1]);
            i++;
        }

            // La langue
        else if (strcmp(argv[i], "-T") == 0 && i + 1 < argc) {
            strcpy(tongue, argv[i + 1]);
            i++;
        }

        else if (strcmp(argv[i], "-D") == 0 && i < argc) {
            strcpy(avatar, "dragon");
        }

        else if (strcmp(argv[i], "-P") == 0 && i < (argc - 1)) {
            strcpy(avatar, "pretty");
            pretty_width = atoi(argv[i+1]);
            strcpy(pretty_image_filename, argv[i + 2]);
            i++;
        }

            // On stocke la citation qui est dans le dernier argument dans une variable quote
        else {
            strcpy(quote, argv[i]);
        }
    }

    // Imprimer selon les arguments donnes
    if (strcmp(avatar, "dragon") == 0) {
        affiche_citation(quote);
        affiche_dragon();
    }
    else if (strcmp(avatar, "pretty") == 0) {
        affiche_pretty_image(pretty_image_filename, pretty_width, pretty_output);
        affiche_pretty_citation(quote, pretty_width, pretty_output);
    }
    else if (strcmp(avatar, "cow") == 0) {
        affiche_citation(quote);
        affiche_vache(eyes, tongue);
    }

    return 0;
}